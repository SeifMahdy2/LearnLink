import React, { useState, useEffect } from 'react';
import { useParams, useHistory } from 'react-router-dom';
import { 
  Box, 
  Typography, 
  Paper, 
  Button, 
  Container,
  CircularProgress,
  Alert,
  Tabs,
  Tab,
  Divider,
  useTheme,
  IconButton,
  Avatar,
  Chip
} from '@mui/material';
import {
  ArrowBack as ArrowBackIcon,
  Description as DescriptionIcon,
  PsychologyAlt as PsychologyAltIcon,
  QuestionAnswer as QuizIcon,
  MenuBook as ReadingIcon,
  Download as DownloadIcon,
  PlayArrow as ProcessIcon,
  CheckCircleOutline as CheckIcon,
  ErrorOutline as ErrorIcon,
  SummarizeOutlined as SummaryIcon
} from '@mui/icons-material';
import { getFileUrl, API_BASE_URL } from '../services/fileService';
import DocumentViewer from '../components/DocumentViewer';
import Quiz from '../components/Quiz';

// Tab Panel component
function TabPanel(props) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`document-tab-${index}`}
      aria-labelledby={`document-tab-${index}`}
      style={{ height: 'calc(100% - 48px)', overflow: 'auto' }}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3, height: '100%' }}>
          {children}
        </Box>
      )}
    </div>
  );
}

function a11yProps(index) {
  return {
    id: `document-tab-${index}`,
    'aria-controls': `document-tabpanel-${index}`,
  };
}

const DocumentPage = () => {
  const { fileId } = useParams();
  const history = useHistory();
  const theme = useTheme();
  
  const [fileData, setFileData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [tabValue, setTabValue] = useState(2);
  const [processing, setProcessing] = useState(false);
  const [processComplete, setProcessComplete] = useState(false);
  const [processError, setProcessError] = useState(false);
  const [generating, setGenerating] = useState(false);
  const [summary, setSummary] = useState(null);

  useEffect(() => {
    const fetchDocument = async () => {
      if (!fileId) {
        setError('No document ID provided');
        setLoading(false);
        return;
      }

      try {
        setLoading(true);
        const response = await getFileUrl(fileId);
        
        if (response.error) {
          setError(response.error);
        } else {
          setFileData({
            id: fileId,
            name: response.name || `Document ${fileId}`,
            url: response.url,
            type: response.type || 'application/pdf',
            learningStyle: response.learningStyle,
            subject: response.subject,
            ...response
          });
        }
      } catch (err) {
        console.error('Error fetching document:', err);
        setError('Failed to load document. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    fetchDocument();
  }, [fileId]);

  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };

  const handleBack = () => {
    history.push('/documents');
  };

  const handleProcess = () => {
    setProcessing(true);
    
    setTimeout(() => {
      setProcessing(false);
      setProcessComplete(true);
    }, 3000);
  };

  const handleGenerateSummary = async () => {
    try {
      setGenerating(true);
      // Simulate API call for summary generation
      // In a real app, you would call an actual API endpoint
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Simulate a summary response
      setSummary(
        `This is a generated summary for document "${fileData?.name || 'Unknown'}". ` +
        `The document appears to be about ${fileData?.subject || 'various topics'} and ` +
        `is optimized for ${fileData?.learningStyle || 'visual'} learners. ` +
        `In a real implementation, this would be generated by an AI processing service.`
      );
    } catch (err) {
      console.error('Error generating summary:', err);
      setError('Failed to generate summary. Please try again later.');
    } finally {
      setGenerating(false);
    }
  };

  const getLearningStyleLabel = (style) => {
    switch(style) {
      case 'visual':
        return 'Visual';
      case 'auditory':
        return 'Auditory';
      case 'reading_writing':
        return 'Reading/Writing';
      case 'kinesthetic':
        return 'Kinesthetic';
      default:
        return style ? style.charAt(0).toUpperCase() + style.slice(1) : 'Reading/Writing';
    }
  };

  const getLearningStyleIcon = (style) => {
    switch(style) {
      case 'visual':
        return <DescriptionIcon />;
      case 'auditory':
        return <DescriptionIcon />;
      case 'reading_writing':
        return <ReadingIcon />;
      case 'kinesthetic':
        return <DescriptionIcon />;
      default:
        return <ReadingIcon />;
    }
  };

  const getProcessingDescription = () => {
    if (!fileData?.learningStyle) return 'Analyzing your document...';
    
    switch(fileData.learningStyle) {
      case 'visual':
        return 'Creating visual summaries, diagrams, and mind maps...';
      case 'auditory':
        return 'Generating audio summaries and discussion points...';
      case 'reading_writing':
        return 'Extracting key points and creating written summaries...';
      case 'kinesthetic':
        return 'Developing interactive exercises and practical examples...';
      default:
        return 'Analyzing your document...';
    }
  };

  if (loading) {
    return (
      <Box 
        sx={{ 
          display: 'flex', 
          justifyContent: 'center', 
          alignItems: 'center', 
          height: '100vh',
          width: '100%',
          backgroundColor: theme.palette.background.default
        }}
      >
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box 
        sx={{ 
          p: 3, 
          maxWidth: 800, 
          mx: 'auto', 
          mt: 4,
          backgroundColor: theme.palette.background.default
        }}
      >
        <IconButton 
          onClick={handleBack}
          sx={{ 
            mb: 2,
            bgcolor: theme.palette.background.paper,
            boxShadow: theme.shadows[1],
            '&:hover': {
              bgcolor: theme.palette.background.paper,
              boxShadow: theme.shadows[2],
            }
          }}
        >
          <ArrowBackIcon fontSize="small" />
        </IconButton>
        <Alert severity="error" sx={{ mb: 2 }}>
          {error}
        </Alert>
      </Box>
    );
  }

  return (
    <Box 
      sx={{ 
        minHeight: '100vh',
        display: 'flex',
        flexDirection: 'column',
        backgroundColor: theme.palette.mode === 'dark' ? 'rgba(0, 0, 0, 0.2)' : 'rgba(0, 0, 0, 0.02)',
        overflow: 'hidden'
      }}
    >
      {/* Document header */}
      <Box 
        sx={{ 
          bgcolor: theme.palette.background.paper,
          boxShadow: theme.shadows[1],
          py: 2,
          px: 3,
          zIndex: 10,
          borderBottom: `1px solid ${theme.palette.divider}`,
          background: `linear-gradient(45deg, ${theme.palette.primary.dark}, ${theme.palette.primary.main})`,
          color: 'white',
          display: 'flex',
          alignItems: 'center',
          gap: 2
        }}
      >
        <IconButton 
          onClick={handleBack}
          size="small"
          sx={{ 
            color: 'white',
            bgcolor: 'rgba(255, 255, 255, 0.1)',
            width: 32,
            height: 32,
            '&:hover': {
              bgcolor: 'rgba(255, 255, 255, 0.2)',
            }
          }}
        >
          <ArrowBackIcon fontSize="small" />
        </IconButton>

        <Typography variant="h6" sx={{ fontWeight: 500, flexGrow: 1 }}>
          {fileData?.name || 'Document'}
        </Typography>
        
        {fileData?.learningStyle && (
          <Chip 
            label={getLearningStyleLabel(fileData.learningStyle)}
            icon={getLearningStyleIcon(fileData.learningStyle)}
            size="medium"
            sx={{ 
              bgcolor: 'rgba(255, 255, 255, 0.1)',
              color: 'white',
              '& .MuiChip-icon': {
                color: 'white'
              }
            }}
          />
        )}
      </Box>

      {/* Main content area with tabs */}
      <Box 
        sx={{ 
          flexGrow: 1,
          display: 'flex',
          flexDirection: 'column',
          overflow: 'hidden',
          px: 3,
          pt: 3,
          pb: 4,
          height: 'calc(100vh - 112px)',
          background: theme.palette.mode === 'dark' 
            ? 'linear-gradient(to bottom, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.1))'
            : 'linear-gradient(to bottom, rgba(0, 0, 0, 0.02), rgba(255, 255, 255, 0))',
          backgroundAttachment: 'fixed'
        }}
      >
        <Paper 
          elevation={2}
          sx={{ 
            borderRadius: 3,
            overflow: 'hidden',
            height: '100%',
            display: 'flex',
            flexDirection: 'column',
            bgcolor: theme.palette.background.paper,
            position: 'relative',
            '&::before': {
              content: '""',
              position: 'absolute',
              top: 0,
              left: 0,
              right: 0,
              height: '4px',
              background: `linear-gradient(90deg, ${theme.palette.primary.main}, ${theme.palette.secondary.main})`
            }
          }}
        >
          <Tabs 
            value={tabValue} 
            onChange={handleTabChange} 
            aria-label="document tabs"
            variant="fullWidth"
            sx={{
              borderBottom: `1px solid ${theme.palette.divider}`,
              bgcolor: theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.03)' : 'rgba(0, 0, 0, 0.02)',
              minHeight: 56
            }}
            TabIndicatorProps={{
              style: {
                height: 3,
                borderRadius: '3px 3px 0 0',
                background: `linear-gradient(90deg, ${theme.palette.primary.main}, ${theme.palette.secondary.main})`
              }
            }}
          >
            <Tab 
              label={
                <Box sx={{ textAlign: 'center' }}>
                  <Typography variant="subtitle2" component="div">
                    Summary
                  </Typography>
                  <Typography variant="caption" color="text.secondary" sx={{ display: 'block' }}>
                    AI-tailored overview
                  </Typography>
                </Box>
              }
              icon={<SummaryIcon />} 
              iconPosition="start"
              sx={{ 
                minHeight: 56,
                textTransform: 'none',
                borderRadius: '4px 4px 0 0'
              }}
              {...a11yProps(0)}
            />
            <Tab 
              label="Quiz" 
              icon={<QuizIcon />} 
              iconPosition="start"
              sx={{ 
                minHeight: 48,
                textTransform: 'none',
                borderRadius: '4px 4px 0 0'
              }}
              {...a11yProps(1)}
            />
            <Tab 
              label="AI Processing" 
              icon={<PsychologyAltIcon />} 
              iconPosition="start"
              sx={{ 
                minHeight: 48,
                textTransform: 'none',
                borderRadius: '4px 4px 0 0'
              }}
              {...a11yProps(2)}
            />
          </Tabs>
          
          <Box sx={{ flexGrow: 1, overflow: 'auto' }}>
            <TabPanel value={tabValue} index={0}>
              <Box sx={{ 
                height: '100%', 
                display: 'flex', 
                flexDirection: 'column',
                position: 'relative'
              }}>
                {!summary && (
                  <Box 
                    sx={{
                      display: 'flex',
                      flexDirection: 'column',
                      alignItems: 'center',
                      justifyContent: 'center',
                      height: '100%',
                      p: 6,
                      textAlign: 'center',
                      position: 'relative',
                      '&::before': {
                        content: '""',
                        position: 'absolute',
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0,
                        background: `radial-gradient(circle at center, ${theme.palette.primary.main}10, transparent)`,
                        opacity: 0.5,
                        zIndex: 0
                      }
                    }}
                  >
                    <Box 
                      sx={{
                        position: 'relative',
                        zIndex: 1,
                        maxWidth: 600,
                        width: '100%',
                        p: 4,
                        borderRadius: 4,
                        bgcolor: theme.palette.mode === 'dark' ? 'rgba(0, 0, 0, 0.2)' : 'rgba(255, 255, 255, 0.8)',
                        backdropFilter: 'blur(10px)',
                        border: `1px solid ${theme.palette.divider}`
                      }}
                    >
                      <Box 
                        sx={{ 
                          width: 100,
                          height: 100,
                          borderRadius: '50%',
                          bgcolor: theme.palette.primary.main,
                          color: 'white',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          margin: '0 auto 2rem',
                          boxShadow: theme.shadows[3]
                        }}
                      >
                        <SummaryIcon sx={{ fontSize: 48 }} />
                      </Box>
                      
                      <Typography variant="h4" gutterBottom sx={{ fontWeight: 600 }}>
                        Generate a Summary
                      </Typography>
                      
                      <Typography variant="h6" color="text.secondary" sx={{ mb: 4, fontWeight: 400 }}>
                        Get an AI-powered summary tailored to your {getLearningStyleLabel(fileData?.learningStyle)} learning style
                      </Typography>
                      
                      <Button 
                        variant="contained" 
                        size="large"
                        disabled={generating}
                        onClick={handleGenerateSummary}
                        startIcon={generating ? <CircularProgress size={20} /> : <SummaryIcon />}
                        sx={{ 
                          px: 4,
                          py: 1.5,
                          borderRadius: 3,
                          fontSize: '1.1rem',
                          background: `linear-gradient(45deg, ${theme.palette.primary.main}, ${theme.palette.primary.dark})`,
                          boxShadow: theme.shadows[4],
                          '&:hover': {
                            background: `linear-gradient(45deg, ${theme.palette.primary.dark}, ${theme.palette.primary.main})`
                          }
                        }}
                      >
                        {generating ? 'Generating...' : 'Generate Summary'}
                      </Button>
                    </Box>
                  </Box>
                )}

                {summary && (
                  <Paper 
                    elevation={2}
                    sx={{ 
                      p: 4,
                      maxWidth: 800,
                      width: '100%',
                      mx: 'auto',
                      borderRadius: 3,
                      position: 'relative',
                      overflow: 'hidden',
                      '&::before': {
                        content: '""',
                        position: 'absolute',
                        top: 0,
                        left: 0,
                        width: '4px',
                        height: '100%',
                        background: `linear-gradient(to bottom, ${theme.palette.primary.main}, ${theme.palette.secondary.main})`
                      }
                    }}
                  >
                    <Typography variant="h5" gutterBottom sx={{ color: theme.palette.primary.main, fontWeight: 600 }}>
                      Document Summary
                    </Typography>
                    <Divider sx={{ mb: 3 }} />
                    <Typography variant="body1" sx={{ lineHeight: 1.8 }}>
                      {summary}
                    </Typography>
                  </Paper>
                )}
              </Box>
            </TabPanel>
            
            <TabPanel value={tabValue} index={1}>
              <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
                <Typography variant="h6" sx={{ px: 2, mb: 2 }}>
                  Quiz
                </Typography>
                
                <Box sx={{ flexGrow: 1, overflow: 'auto', px: 2 }}>
                  <Quiz fileId={fileId} title={fileData?.name} />
                </Box>
              </Box>
            </TabPanel>
            
            <TabPanel value={tabValue} index={2}>
              <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
                <Typography variant="h6" sx={{ px: 2, mb: 2 }}>
                  AI Processing
                </Typography>
                
                <Box sx={{ flexGrow: 1, overflow: 'auto', px: 2 }}>
                  <Paper
                    elevation={0}
                    sx={{
                      p: 3,
                      borderRadius: 2,
                      bgcolor: theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.03)' : 'rgba(0, 0, 0, 0.02)',
                      border: `1px solid ${theme.palette.divider}`,
                      mb: 3
                    }}
                  >
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 3 }}>
                      <Box>
                        <Typography variant="h6" gutterBottom>
                          {fileData?.name}
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                          Learning Style: <Box component="span" sx={{ color: theme.palette.primary.main, fontWeight: 500 }}>{getLearningStyleLabel(fileData?.learningStyle)}</Box>
                        </Typography>
                      </Box>
                      
                      <Box sx={{ ml: 'auto' }}>
                        {processComplete ? (
                          <Button
                            variant="contained"
                            color="success"
                            startIcon={<CheckIcon />}
                            size="small"
                            sx={{ 
                              borderRadius: 2,
                              px: 2
                            }}
                            disabled
                          >
                            Processed
                          </Button>
                        ) : processError ? (
                          <Button
                            variant="contained"
                            color="error"
                            startIcon={<ErrorIcon />}
                            size="small"
                            sx={{ 
                              borderRadius: 2,
                              px: 2
                            }}
                            onClick={handleProcess}
                          >
                            Retry
                          </Button>
                        ) : processing ? (
                          <Button
                            variant="contained"
                            startIcon={<CircularProgress size={16} color="inherit" />}
                            size="small"
                            sx={{ 
                              borderRadius: 2,
                              px: 2
                            }}
                            disabled
                          >
                            Processing...
                          </Button>
                        ) : (
                          <Button
                            variant="contained"
                            startIcon={<ProcessIcon />}
                            onClick={handleProcess}
                            size="small"
                            sx={{ 
                              borderRadius: 2,
                              px: 2
                            }}
                          >
                            Process with AI
                          </Button>
                        )}
                      </Box>
                    </Box>
                  </Paper>
                  
                  {processComplete && (
                    <Box>
                      <Alert 
                        severity="success" 
                        sx={{ 
                          mb: 3, 
                          borderRadius: 2,
                          boxShadow: theme.shadows[1]
                        }}
                      >
                        <Typography variant="subtitle2">
                          Document Processed Successfully!
                        </Typography>
                        <Typography variant="body2">
                          We've generated learning materials optimized for your {getLearningStyleLabel(fileData?.learningStyle)} learning style.
                        </Typography>
                      </Alert>
                      
                      <Box sx={{ display: 'flex', gap: 3, flexWrap: 'wrap' }}>
                        <Paper
                          elevation={0}
                          sx={{
                            p: 3,
                            borderRadius: 2,
                            border: `1px solid ${theme.palette.divider}`,
                            flex: '1 0 250px',
                            bgcolor: theme.palette.background.paper,
                            transition: 'transform 0.2s',
                            '&:hover': {
                              transform: 'translateY(-4px)',
                              boxShadow: theme.shadows[2]
                            }
                          }}
                        >
                          <Box sx={{ display: 'flex', alignItems: 'flex-start', mb: 2 }}>
                            <Avatar 
                              sx={{ 
                                bgcolor: 'primary.light',
                                color: 'primary.contrastText',
                                mr: 2
                              }}
                            >
                              <SummaryIcon />
                            </Avatar>
                            <Box>
                              <Typography variant="h6" sx={{ mb: 0.5 }}>
                                Document Summary
                              </Typography>
                              <Typography variant="body2" color="text.secondary">
                                Key points and main ideas
                              </Typography>
                            </Box>
                          </Box>
                          <Button 
                            variant="outlined" 
                            fullWidth
                            sx={{ borderRadius: 2, mt: 1 }}
                          >
                            View Summary
                          </Button>
                        </Paper>
                        
                        <Paper
                          elevation={0}
                          sx={{
                            p: 3,
                            borderRadius: 2,
                            border: `1px solid ${theme.palette.divider}`,
                            flex: '1 0 250px',
                            bgcolor: theme.palette.background.paper,
                            transition: 'transform 0.2s',
                            '&:hover': {
                              transform: 'translateY(-4px)',
                              boxShadow: theme.shadows[2]
                            }
                          }}
                        >
                          <Box sx={{ display: 'flex', alignItems: 'flex-start', mb: 2 }}>
                            <Avatar 
                              sx={{ 
                                bgcolor: 'secondary.light',
                                color: 'secondary.contrastText',
                                mr: 2
                              }}
                            >
                              <QuizIcon />
                            </Avatar>
                            <Box>
                              <Typography variant="h6" sx={{ mb: 0.5 }}>
                                Practice Quiz
                              </Typography>
                              <Typography variant="body2" color="text.secondary">
                                Test your knowledge
                              </Typography>
                            </Box>
                          </Box>
                          <Button 
                            variant="outlined" 
                            fullWidth
                            sx={{ borderRadius: 2, mt: 1 }}
                            onClick={() => setTabValue(1)}
                          >
                            Take Quiz
                          </Button>
                        </Paper>
                        
                        <Paper
                          elevation={0}
                          sx={{
                            p: 3,
                            borderRadius: 2,
                            border: `1px solid ${theme.palette.divider}`,
                            flex: '1 0 250px',
                            bgcolor: theme.palette.background.paper,
                            transition: 'transform 0.2s',
                            '&:hover': {
                              transform: 'translateY(-4px)',
                              boxShadow: theme.shadows[2]
                            }
                          }}
                        >
                          <Box sx={{ display: 'flex', alignItems: 'flex-start', mb: 2 }}>
                            <Avatar 
                              sx={{ 
                                bgcolor: 'success.light',
                                color: 'success.contrastText',
                                mr: 2
                              }}
                            >
                              <DownloadIcon />
                            </Avatar>
                            <Box>
                              <Typography variant="h6" sx={{ mb: 0.5 }}>
                                Download Materials
                              </Typography>
                              <Typography variant="body2" color="text.secondary">
                                Get offline study materials
                              </Typography>
                            </Box>
                          </Box>
                          <Button 
                            variant="outlined" 
                            fullWidth
                            sx={{ borderRadius: 2, mt: 1 }}
                          >
                            Download
                          </Button>
                        </Paper>
                      </Box>
                    </Box>
                  )}
                  
                  {!processComplete && !processing && (
                    <Box 
                      sx={{ 
                        display: 'flex', 
                        flexDirection: 'column', 
                        alignItems: 'center', 
                        justifyContent: 'center',
                        py: 8,
                        textAlign: 'center',
                        height: '100%'
                      }}
                    >
                      <Box 
                        sx={{ 
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          width: 80,
                          height: 80,
                          borderRadius: '50%',
                          bgcolor: theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.03)',
                          mb: 3
                        }}
                      >
                        <PsychologyAltIcon sx={{ fontSize: 40, color: theme.palette.primary.main }} />
                      </Box>
                      <Typography variant="h6" gutterBottom>
                        Ready to Process Your Document
                      </Typography>
                      <Typography variant="body2" color="text.secondary" sx={{ maxWidth: 500, mb: 4 }}>
                        Click the button below to start processing your document with AI, optimized for your {getLearningStyleLabel(fileData?.learningStyle)} learning style.
                      </Typography>
                      <Button 
                        variant="contained"
                        startIcon={<ProcessIcon />}
                        onClick={handleProcess}
                        size="large"
                        sx={{ 
                          borderRadius: 2,
                          px: 4,
                          py: 1.5,
                          background: `linear-gradient(45deg, ${theme.palette.primary.main}, ${theme.palette.primary.dark})`,
                          boxShadow: theme.shadows[4],
                          '&:hover': {
                            background: `linear-gradient(45deg, ${theme.palette.primary.dark}, ${theme.palette.primary.main})`
                          }
                        }}
                      >
                        Process with AI
                      </Button>
                    </Box>
                  )}
                  
                  {processing && (
                    <Box 
                      sx={{ 
                        display: 'flex', 
                        flexDirection: 'column', 
                        alignItems: 'center', 
                        justifyContent: 'center',
                        py: 8,
                        textAlign: 'center'
                      }}
                    >
                      <CircularProgress size={60} sx={{ mb: 3 }} />
                      <Typography variant="h6" gutterBottom>
                        Processing Your {getLearningStyleLabel(fileData?.learningStyle)} Learning Materials
                      </Typography>
                      <Typography variant="body2" color="text.secondary" sx={{ maxWidth: 500 }}>
                        {getProcessingDescription()}
                      </Typography>
                    </Box>
                  )}
                </Box>
              </Box>
            </TabPanel>
          </Box>
        </Paper>
      </Box>
    </Box>
  );
};

export default DocumentPage; 